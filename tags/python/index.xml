<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>python on </title>
    <link>https://bsch0111.github.io/tags/python/</link>
    <description>Recent content in python on </description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ko-kr</language>
    <lastBuildDate>Mon, 22 Mar 2021 02:11:40 +0900</lastBuildDate><atom:link href="https://bsch0111.github.io/tags/python/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>FLASK_정리2</title>
      <link>https://bsch0111.github.io/post/flask_2/</link>
      <pubDate>Mon, 22 Mar 2021 02:11:40 +0900</pubDate>
      
      <guid>https://bsch0111.github.io/post/flask_2/</guid>
      <description>RENTER_TEMPLATE @app.route(&amp;#39;blue&amp;#39;) def main(): return render_template(&amp;#39;blue.html&amp;#39;)  templates 폴더 기준으로 blue.</description>
    </item>
    
    <item>
      <title>FLASK_정리_1</title>
      <link>https://bsch0111.github.io/post/flask_%EC%A0%95%EB%A6%AC_1/</link>
      <pubDate>Mon, 22 Mar 2021 00:55:20 +0900</pubDate>
      
      <guid>https://bsch0111.github.io/post/flask_%EC%A0%95%EB%A6%AC_1/</guid>
      <description>FLASK 기본정리  기본구조 flask.app ㄴ __init__.py  기본적으로 사용할 땐 FLASK_APP이라는 환경변수를 지정하고 사용해야한다.</description>
    </item>
    
    <item>
      <title>Orm에_대해서</title>
      <link>https://bsch0111.github.io/post/orm%EC%97%90_%EB%8C%80%ED%95%B4%EC%84%9C/</link>
      <pubDate>Sat, 13 Mar 2021 22:41:48 +0900</pubDate>
      
      <guid>https://bsch0111.github.io/post/orm%EC%97%90_%EB%8C%80%ED%95%B4%EC%84%9C/</guid>
      <description>ORM (Object_Relational Mapper) 장점
 현재 사용하고 있는 언어만 사용해도 됨 데이터베이스 시스템으로부터 분리가 됨 직접 작성하는 SQL 쿼리문이 없고 더 높은 성능의 SQL 쿼리문을 작성할 수 있습니다.</description>
    </item>
    
    <item>
      <title>Requirements.txt 생성하는 방법</title>
      <link>https://bsch0111.github.io/post/requirements.txt_%EC%83%9D%EC%84%B1%ED%95%98%EB%8A%94%EB%B0%A9%EB%B2%95/</link>
      <pubDate>Sun, 31 Jan 2021 03:48:18 +0900</pubDate>
      
      <guid>https://bsch0111.github.io/post/requirements.txt_%EC%83%9D%EC%84%B1%ED%95%98%EB%8A%94%EB%B0%A9%EB%B2%95/</guid>
      <description>파이썬에 사용되는 라이브러리를 명시하기 위해 requirements.txt가 사용된다.
global한 환경에 대한 requirements.</description>
    </item>
    
    <item>
      <title>Private형에접근</title>
      <link>https://bsch0111.github.io/post/private%ED%98%95%EC%97%90%EC%A0%91%EA%B7%BC/</link>
      <pubDate>Mon, 21 Dec 2020 22:20:13 +0900</pubDate>
      
      <guid>https://bsch0111.github.io/post/private%ED%98%95%EC%97%90%EC%A0%91%EA%B7%BC/</guid>
      <description>private 형에 접근 : __로 선언되어있는 private 형 같은 경우 외부 import 되어있으면 접근할 수 없다.</description>
    </item>
    
    <item>
      <title>Protected Getter, Setter 사용</title>
      <link>https://bsch0111.github.io/post/protected_getter/</link>
      <pubDate>Mon, 21 Dec 2020 22:19:19 +0900</pubDate>
      
      <guid>https://bsch0111.github.io/post/protected_getter/</guid>
      <description>Protected Getter, Setter 사용 class Car: def __init__(self, car_name, car_color ): self.</description>
    </item>
    
    <item>
      <title>Duck_typer과 매직 메소드와 private형 변수 접근</title>
      <link>https://bsch0111.github.io/post/duck_type_magicmethod/</link>
      <pubDate>Mon, 21 Dec 2020 22:18:09 +0900</pubDate>
      
      <guid>https://bsch0111.github.io/post/duck_type_magicmethod/</guid>
      <description>클래스 생성시 필요한 부분 Duck Typing  객체의 상속을 이용하지 않고, 해당 기능을 하는 method가 있는지만을 파악하는것 만약 어떤 새가 오리처럼 걷고, 헤엄치고, 꽥꽥거리는 소리를 낸다면 나는 그 새를 오리라고 부를 것이다.</description>
    </item>
    
    <item>
      <title>상속과추상화</title>
      <link>https://bsch0111.github.io/post/%EC%83%81%EC%86%8D%EA%B3%BC%EC%B6%94%EC%83%81%ED%99%94/</link>
      <pubDate>Sat, 19 Dec 2020 23:15:18 +0900</pubDate>
      
      <guid>https://bsch0111.github.io/post/%EC%83%81%EC%86%8D%EA%B3%BC%EC%B6%94%EC%83%81%ED%99%94/</guid>
      <description>#상속
클래스 관계에는 : 상속관계와 포함 관계가 있다. 포함관계는 멤버변수에 다른 클래스 변수를 넣어서 사용하는 것이고, 호출될때는 포함관계에 있는 함수가 제일 먼저 호출된다.</description>
    </item>
    
    <item>
      <title>==와is의차이</title>
      <link>https://bsch0111.github.io/post/%EC%99%80is%EC%9D%98%EC%B0%A8%EC%9D%B4/</link>
      <pubDate>Sat, 19 Dec 2020 23:14:20 +0900</pubDate>
      
      <guid>https://bsch0111.github.io/post/%EC%99%80is%EC%9D%98%EC%B0%A8%EC%9D%B4/</guid>
      <description>== : 값을 비교 is : 레퍼런스(참조) 비교
1000 == 10 ** 3 True 1000 is 10 ** 3 False </description>
    </item>
    
    <item>
      <title>가정 설정문(Assert) </title>
      <link>https://bsch0111.github.io/post/assert/</link>
      <pubDate>Thu, 17 Dec 2020 01:56:58 +0900</pubDate>
      
      <guid>https://bsch0111.github.io/post/assert/</guid>
      <description>가정 설정문(assert)  assert는 뒤의 조건이 True 가 아니면 AssertError 를 발생 assert condition ‘message’로 구성 message는 AssertionError 와 같이 출력  a = 3 assert a == 3 , ‘a는 3이 아니다’ assert a == 5 , ‘a는 5가 아니다’ 2 a = 3 3 assert a == 3 , &amp;#39;a는 3이 아니다&amp;#39; ----&amp;gt; 4 assert a == 5 , &amp;#39;a는 5가 아니다&amp;#39; AssertionError: a는 5가 아니다 </description>
    </item>
    
    <item>
      <title>python 클래스를 정의할 때 object를 붙이는 것</title>
      <link>https://bsch0111.github.io/post/python_class_object/</link>
      <pubDate>Sun, 13 Dec 2020 22:15:31 +0900</pubDate>
      
      <guid>https://bsch0111.github.io/post/python_class_object/</guid>
      <description>python 클래스를 정의할 때 object를 붙이는 것 참고 :https://hashcode.co.kr/questions/487/object%EB%8A%94-%EC%99%9C-%EC%83%81%EC%86%8D%EB%B0%9B%EB%8A%94-%EA%B1%B4%EA%B0%80%EC%9A%94
# python 3.</description>
    </item>
    
    <item>
      <title>인스턴스 메소드, 정적 메소드, 클래스 메서드</title>
      <link>https://bsch0111.github.io/post/python_methods/</link>
      <pubDate>Tue, 08 Dec 2020 02:17:16 +0900</pubDate>
      
      <guid>https://bsch0111.github.io/post/python_methods/</guid>
      <description>인스턴스 메소드, 정적 메소드, 클래스 메서드 참고 : http://pythonstudy.xyz/python/article/19-%ED%81%B4%EB%9E%98%EC%8A%A4
 인스턴스 메소드 : 인스턴스 필드를 self 를 통해 접근할 수 있음 정적 메서드 : self 파라미터를 갖지 않고, 인스턴스 변수에 엑세스 할 수 없다.</description>
    </item>
    
    <item>
      <title>Python class 변수 , 인스턴스 변수</title>
      <link>https://bsch0111.github.io/post/python_variables/</link>
      <pubDate>Tue, 08 Dec 2020 02:15:47 +0900</pubDate>
      
      <guid>https://bsch0111.github.io/post/python_variables/</guid>
      <description>class 변수 , 인스턴스 변수 참고 : http://pythonstudy.xyz/python/article/19-%ED%81%B4%EB%9E%98%EC%8A%A4
class Rectangle: count = 0 # 클래스 변수 # 초기자(initializer) def __init__(self, width, height): # self.</description>
    </item>
    
    <item>
      <title>python 클래스 인스턴스를 생성할 때 함수(init,new) 호출 순서 </title>
      <link>https://bsch0111.github.io/post/python_init_new/</link>
      <pubDate>Tue, 08 Dec 2020 02:14:02 +0900</pubDate>
      
      <guid>https://bsch0111.github.io/post/python_init_new/</guid>
      <description>python 클래스 인스턴스를 생성할 때 함수 호출 순서 참고 : https://wikidocs.</description>
    </item>
    
    <item>
      <title>breakpoint 로 디버깅하기</title>
      <link>https://bsch0111.github.io/post/python-dubuggin/</link>
      <pubDate>Mon, 07 Dec 2020 00:14:34 +0900</pubDate>
      
      <guid>https://bsch0111.github.io/post/python-dubuggin/</guid>
      <description>breakpoint 로 디버깅하기  참고 : https://www.askpython.com/python/built-in-methods/python-breakpoint-function 디버깅(debugging)은 프로그램이 정상 작동할 수 있도록 잠재적 ‘버그’를 제고하는 행위 파이썬에서는 pdb라는 파이썬 표준 라이브러리 모듈을 사용함 예시  import pdb a = None for i in range(10) : if i == 4 : a = &amp;#39;Hi&amp;#39; print(&amp;#39;a is set to&amp;#39;, a ) elif i == 5: pdb.</description>
    </item>
    
    <item>
      <title>Python package란</title>
      <link>https://bsch0111.github.io/post/python_package/</link>
      <pubDate>Sun, 06 Dec 2020 15:14:50 +0900</pubDate>
      
      <guid>https://bsch0111.github.io/post/python_package/</guid>
      <description>Python Package란  참고 : https://docs.python.org/3/tutorial/modules.html#packages “dotted module names”을 이용해서 Python의 모듈을 구조화하는 방법 예를 들어 A.</description>
    </item>
    
    <item>
      <title>test_pypl에 패키지 배포하기</title>
      <link>https://bsch0111.github.io/post/deploy_python_to_test_pypl/</link>
      <pubDate>Sun, 06 Dec 2020 15:12:00 +0900</pubDate>
      
      <guid>https://bsch0111.github.io/post/deploy_python_to_test_pypl/</guid>
      <description>2020/12/05 5. test pypl 에 패키지 배포
test pypl 에 패키지 배포 과정  PyPI : Python Package Index (PyPI) 1 우선 package 를 만들고, 배포가 가능하도록 README.</description>
    </item>
    
    <item>
      <title> __main__ : python 모듈 호출 시 전역에 선언된 함수 수행 문제해결방법</title>
      <link>https://bsch0111.github.io/post/python_global/</link>
      <pubDate>Sun, 06 Dec 2020 03:08:28 +0900</pubDate>
      
      <guid>https://bsch0111.github.io/post/python_global/</guid>
      <description>python 모듈 호출 시 전역에 선언된 함수 실행 python 모듈을 호출 했을 때 전역으로 선언되어 있는 함수, 및 변수를 수행한다.</description>
    </item>
    
    <item>
      <title>PYTHON과 객체지향프로그래밍 - 1</title>
      <link>https://bsch0111.github.io/post/python_oop/</link>
      <pubDate>Thu, 03 Dec 2020 00:43:40 +0900</pubDate>
      
      <guid>https://bsch0111.github.io/post/python_oop/</guid>
      <description>PYTHON과 객체지향프로그래밍 객체지향 프로그램? 위키백과
 여러 개의 독립된 단위, 즉 &amp;ldquo;객체&amp;quot;들의 모임으로 파악하고자 하는 것이다.</description>
    </item>
    
  </channel>
</rss>
